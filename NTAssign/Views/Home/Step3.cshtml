@* ClassSuffix: _ *@
@model NTAssign.Models.PlotModel
@{
    ViewBag.Title = "Step3";
}
@section styles
{
    <style>
        @@media (max-width: 768px) {
            html, body {
                min-width: 768px;
            }
        }
    </style>
}
<h1 class="math">
    Step 3 <small>@Energy.envArr[Model.type]</small>
</h1>
<hr />
<h2 class="math">Results</h2>
<div id="body-container">
    <div class="row">
        <!-- the plot -->
        <div class="col-md-6 col-xs-12 math" oncontextmenu="return false" onmousedown="return false">
            <div class="row">
                <div class="col-lg-offset-2 col-md-offset-6 axis-label" style="text-align: center; font-size: 20px; color: #0000FF">
                    \(\omega_{\mathrm{RBM}}\ (\mathrm{cm^{-1}})\)
                </div>
            </div>
            <br />
            <div id="plot-container" class="row">
                <div>
                    <div style="position: absolute; top: 70%; left: 2%; font-size: 20px; transform:rotate(-90deg); transform-origin: top left;" class="axis-label">
                        @Html.Raw(Model.YAxisLabel())
                    </div>
                </div>
                <div id="plot-placeholder" style="width: 550px; height: 400px; font-family: serif;" class="col-md-offset-1 col-xs-offset-1"></div>
            </div>
            <div class="row">
                <div class="col-lg-offset-2 col-md-offset-5 axis-label" style="text-align: center; font-size: 20px; color: #FF0000">
                    @Html.Raw(Model.XAxisLabel())
                </div>
            </div>
        </div>
        <!-- end of plot -->

        <div class="col-lg-5 col-md-4 col-xs-8 col-lg-offset-0_5 col-md-offset-1_5 col-xs-offset-1 math changing_height">
            <br />
            <br />
            <p id="resultDiv" class="@( 
                Model.ar != AssignResult.error ? "alert-success" : "alert-error"
                ) text-center" style="padding: 12px; border-radius: 4px; font-size: 24px;">
                @Html.Raw(Model.resultString)
            </p>
            <div style="font-size: 18px; border-radius: 4px; border: 2px solid #808080;" class="bottom-div clearfix">
                @if (Model.pointType == "green")
                {
                    <p><font style="color: rgb(12, 180, 15);">&#11046;</font> \(E_{ii}\) vs. \(\omega_\mathrm{RBM}\)</p>
                }
                else
                {
                    <p><font style="color: rgb(255, 0, 0); font-weight: 900;">&#9632;</font> &nbsp;\(E_{ii}\) difference vs. \(E_{ii}\) average</p>
                    if (Model.BluePoint() != null)
                    {
                        <p><font style="color: rgb(0, 0, 255); font-weight: 900;">&#11046;</font> \(E_{ii}\) difference vs. \(\omega_\mathrm{RBM}\)</p>
                    }
                }
                <p>
                    <font style="color: rgb(12, 127, 15); font-weight: 900;">&mdash;</font>
                    \(532\ \mathrm{nm}\) laser (\(2.33\ \mathrm{eV}\))
                </p>
                <p>
                    <font style="color: rgb(245, 0, 0); font-weight: 900;">&mdash;</font>
                    \(633\ \mathrm{nm}\) laser (\(1.96\ \mathrm{eV}\))
                </p>
                <p>
                    <font style="color: rgb(136, 136, 136); font-weight: 900;">&mdash;</font>
                    \(785\ \mathrm{nm}\) laser (\(1.58\ \mathrm{eV}\))
                </p>
                <p>
                    Laser resonance window: \(\pm100\ \mathrm{meV}\)
                </p>
            </div>
        </div>
    </div>
</div>

@section scripts
{
        @{
        if (Model.ar != AssignResult.error)
        {
            var all = Model.All();
            var result = Model.Result();
            var rbm = Model.RBM();
            <script>
                var params = {
                    point: @Html.Raw(Model.Point()),
                    pointType: "@Model.pointType",
                    bluePoint: @(Model.BluePoint() ?? "null"),
                    isMetal: @Html.Raw(Model.IsMetal()),
                    all: @Html.Raw(all.Item1),
                    all_label: @Html.Raw(all.Item2), //allLabel is rather ugly
                    result: @Html.Raw(result.Item1),
                    result_label: @Html.Raw(result.Item2),
                    rbm: @Html.Raw(rbm.Item1),
                    rbm_label: @Html.Raw(rbm.Item2),
                    rbm_pos: @Html.Raw(rbm.Item3),
                    JSLint: "f**k JSLint for 'expression expected' after razor, and I don't want to add trailing comma"
                };
                $(drawPlot("plot-placeholder", params));
            </script>
        }
        else
        {
            <script>
                $(".axis-label").remove();
                var $p = $("#plot-placeholder");
                $p.html("No Image");
                $p.css({
                    "border": "2px dashed #000000",
                    "font-size": "50px",
                    "line-height": "400px",
                    "text-align": "center",
                    "vertical-align": "center",
                    "font-family": "Arial, sans-serif"
                });
            </script>
        }
    }
}